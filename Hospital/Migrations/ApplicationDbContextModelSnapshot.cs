// <auto-generated />
using System;
using Hospital.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hospital.Models.Cita", b =>
                {
                    b.Property<int>("ID_Cita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Cita"), 1L, 1);

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Doctor")
                        .HasColumnType("int");

                    b.Property<int>("ID_Paciente")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Receta_Medica")
                        .HasColumnType("int");

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.HasKey("ID_Cita");

                    b.HasIndex("ID_Doctor");

                    b.HasIndex("ID_Paciente");

                    b.HasIndex("ID_Receta_Medica")
                        .IsUnique()
                        .HasFilter("[ID_Receta_Medica] IS NOT NULL");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Hospital.Models.Consultorio", b =>
                {
                    b.Property<int>("Id_Consultorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Consultorio"), 1L, 1);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Consultorio");

                    b.ToTable("Consultorio");
                });

            modelBuilder.Entity("Hospital.Models.DiasDoctor", b =>
                {
                    b.Property<int>("ID_DiasDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_DiasDoctor"), 1L, 1);

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<int>("ID_Doctor")
                        .HasColumnType("int");

                    b.HasKey("ID_DiasDoctor");

                    b.HasIndex("ID_Doctor");

                    b.ToTable("DiasDoctor");
                });

            modelBuilder.Entity("Hospital.Models.Doctor", b =>
                {
                    b.Property<int>("ID_Doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Doctor"), 1L, 1);

                    b.Property<string>("ID_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.Property<int?>("id_Consultorio")
                        .HasColumnType("int");

                    b.HasKey("ID_Doctor");

                    b.HasIndex("ID_Usuario");

                    b.HasIndex("id_Consultorio")
                        .IsUnique()
                        .HasFilter("[id_Consultorio] IS NOT NULL");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Especialidad", b =>
                {
                    b.Property<int>("Id_Especialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Especialidad"), 1L, 1);

                    b.Property<int?>("DoctorID_Doctor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Especialidad");

                    b.HasIndex("DoctorID_Doctor");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("Hospital.Models.Factura", b =>
                {
                    b.Property<int>("ID_Factura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Factura"), 1L, 1);

                    b.Property<int>("ID_Cita")
                        .HasColumnType("int");

                    b.Property<decimal>("Otro_Servicios")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Precio_Consulta")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID_Factura");

                    b.HasIndex("ID_Cita")
                        .IsUnique();

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("Hospital.Models.Horario_Doctor", b =>
                {
                    b.Property<int>("ID_Horario_Doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Horario_Doctor"), 1L, 1);

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("ID_Doctor")
                        .HasColumnType("int");

                    b.HasKey("ID_Horario_Doctor");

                    b.HasIndex("ID_Doctor");

                    b.ToTable("Horario_Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Horas_Doctor", b =>
                {
                    b.Property<int>("ID_Horas_Doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Horas_Doctor"), 1L, 1);

                    b.Property<string>("Hora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_DiasDoctor")
                        .HasColumnType("int");

                    b.HasKey("ID_Horas_Doctor");

                    b.HasIndex("ID_DiasDoctor");

                    b.ToTable("Horas_Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Medicina", b =>
                {
                    b.Property<int>("ID_Medicina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Medicina"), 1L, 1);

                    b.Property<bool>("En_Existencia")
                        .HasColumnType("bit");

                    b.Property<int>("ID_Receta_Medicina")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Medicina");

                    b.HasIndex("ID_Receta_Medicina");

                    b.ToTable("Medicina");
                });

            modelBuilder.Entity("Hospital.Models.Paciente", b =>
                {
                    b.Property<int>("ID_Paciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Paciente"), 1L, 1);

                    b.Property<string>("ID_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID_Paciente");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Hospital.Models.Recepcionista", b =>
                {
                    b.Property<int>("ID_Recepcionista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Recepcionista"), 1L, 1);

                    b.Property<string>("ID_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.HasKey("ID_Recepcionista");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Recepcionista");
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medica", b =>
                {
                    b.Property<int>("ID_Receta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Receta"), 1L, 1);

                    b.Property<int?>("DoctorID_Doctor")
                        .HasColumnType("int");

                    b.Property<string>("Especificaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Doctor")
                        .HasColumnType("int");

                    b.HasKey("ID_Receta");

                    b.HasIndex("DoctorID_Doctor");

                    b.ToTable("Receta_Medica");
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medicina", b =>
                {
                    b.Property<int>("ID_Receta_Medicina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Receta_Medicina"), 1L, 1);

                    b.Property<int>("ID_Receta_Medica")
                        .HasColumnType("int");

                    b.HasKey("ID_Receta_Medicina");

                    b.HasIndex("ID_Receta_Medica");

                    b.ToTable("Receta_Medicina");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hospital.Models.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CURP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Usuario");
                });

            modelBuilder.Entity("Hospital.Models.Cita", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", "Doctor")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("ID_Paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Receta_Medica", "Receta_Medica")
                        .WithOne("Cita")
                        .HasForeignKey("Hospital.Models.Cita", "ID_Receta_Medica");

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");

                    b.Navigation("Receta_Medica");
                });

            modelBuilder.Entity("Hospital.Models.DiasDoctor", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("ID_Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Doctor", b =>
                {
                    b.HasOne("Hospital.Models.Usuario", "Usuario")
                        .WithMany("Doctor")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Consultorio", "Consultorio")
                        .WithOne("Doctor")
                        .HasForeignKey("Hospital.Models.Doctor", "id_Consultorio");

                    b.Navigation("Consultorio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Hospital.Models.Especialidad", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", null)
                        .WithMany("Especialidad")
                        .HasForeignKey("DoctorID_Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Factura", b =>
                {
                    b.HasOne("Hospital.Models.Cita", "Cita")
                        .WithOne("Factura")
                        .HasForeignKey("Hospital.Models.Factura", "ID_Cita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Hospital.Models.Horario_Doctor", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", "Doctor")
                        .WithMany("Horario_Doctor")
                        .HasForeignKey("ID_Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Horas_Doctor", b =>
                {
                    b.HasOne("Hospital.Models.DiasDoctor", "DiasDoctor")
                        .WithMany("Horas_Doctor")
                        .HasForeignKey("ID_DiasDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiasDoctor");
                });

            modelBuilder.Entity("Hospital.Models.Medicina", b =>
                {
                    b.HasOne("Hospital.Models.Receta_Medicina", "Receta_Medicina")
                        .WithMany("Medicina")
                        .HasForeignKey("ID_Receta_Medicina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta_Medicina");
                });

            modelBuilder.Entity("Hospital.Models.Paciente", b =>
                {
                    b.HasOne("Hospital.Models.Usuario", "Usuario")
                        .WithMany("Paciente")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Hospital.Models.Recepcionista", b =>
                {
                    b.HasOne("Hospital.Models.Usuario", "Usuario")
                        .WithMany("Recepcionista")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medica", b =>
                {
                    b.HasOne("Hospital.Models.Doctor", null)
                        .WithMany("Receta_Medica")
                        .HasForeignKey("DoctorID_Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medicina", b =>
                {
                    b.HasOne("Hospital.Models.Receta_Medica", "Receta_Medica")
                        .WithMany()
                        .HasForeignKey("ID_Receta_Medica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta_Medica");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Cita", b =>
                {
                    b.Navigation("Factura")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Consultorio", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.DiasDoctor", b =>
                {
                    b.Navigation("Horas_Doctor");
                });

            modelBuilder.Entity("Hospital.Models.Doctor", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Especialidad");

                    b.Navigation("Horario_Doctor");

                    b.Navigation("Receta_Medica");
                });

            modelBuilder.Entity("Hospital.Models.Paciente", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medica", b =>
                {
                    b.Navigation("Cita")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Receta_Medicina", b =>
                {
                    b.Navigation("Medicina");
                });

            modelBuilder.Entity("Hospital.Models.Usuario", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Paciente");

                    b.Navigation("Recepcionista");
                });
#pragma warning restore 612, 618
        }
    }
}
